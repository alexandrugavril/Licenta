<!-- 
Microsoft Speech SDK
====================


FEATURES
--------
* Short-form recognition.
* Long-form dictation.
* Recognition with intent.
* Integrated microphone support.
* External audio support.

LICENSE
-------
� 2015 Microsoft. All rights reserved.  
This document is provided �as-is�. Information and views expressed in this document, including URL and other Internet Web site references, may change without notice.  
Some examples depicted herein are provided for illustration only and are fictitious.  No real association or connection is intended or should be inferred. 
This document does not provide you with any legal rights to any intellectual property in any Microsoft product. You may copy and use this document for your internal, reference purposes. This 
document is confidential and proprietary to Microsoft. It is disclosed and can be used only pursuant to a non-disclosure agreement. 
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <script src="js/speech.1.0.0.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="css/index.css">
    <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>

    <script src="./resources/scripts/progressbar.js"></script>
    <script type="text/javascript" src="./resources/scripts/loadgo.min.js"></script>
    <script type="text/javascript" src="./js/jquery.canvasjs.min.js"></script>
    <script type="text/javascript">
        var client;
        var request;

        function useMic() {
            return true;
        }

        function getMode() {
            return Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionMode.longDictation;
        }

        function getOxfordKey() {
            return "c3cece936e95450eb95b7d18dd371bf9";
        }

		function getSecondaryOxfordKey() {
			return "ab61d10498274872bd6c493bebdf153d";
		}

        function getLanguage() {
            return "en-us";
        }

        function clearText() {
            document.getElementById("output").value = "";
        }

        function setText(text) {
            document.getElementById("output").value += text;
        }

        function getLuisConfig() {
            var appid = "9e9c32b0-4496-48b5-9a0b-0342511e3d4c";
            var subid = "310de3dce0964707bbe019b877553fed";
			console.log("Called");

            if (appid.length > 0 && subid.length > 0) {
                console.log("LUIS?");
                return { appid: appid, subid: subid };
            }

            return null;
        }

        function start() {
            var mode = getMode();
            var luisCfg = getLuisConfig();

            clearText();

            if (useMic()) {
                if (luisCfg) {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClientWithIntent(
                        getLanguage(),
                        getOxfordKey(),
                        getSecondaryOxfordKey(),
                        luisCfg.appid,
                        luisCfg.subid);
                } else {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClient(
                        mode,
                        getLanguage(),
                        getOxfordKey(),
                        getSecondaryOxfordKey());
                }
                client.startMicAndRecognition();
				console.log("Started?");
                setTimeout(function () {
					console.log("Ended?");
                    client.endMicAndRecognition();
                }, 5000);
            } else {
                if (luisCfg) {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClientWithIntent(
                        getLanguage(),
                        getOxfordKey(),
                        getSecondaryOxfordKey(),
                        luisCfg.appid,
                        luisCfg.subid);
                } else {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClient(
                        mode,
                        getLanguage(),
                        getOxfordKey(),
                        getSecondaryOxfordKey());
                }
                request = new XMLHttpRequest();
                request.open(
                    'GET',
                    (mode == Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionMode.shortPhrase) ? "whatstheweatherlike.wav" : "batman.wav",
                    true);
                request.responseType = 'arraybuffer';
                request.onload = function () {
                    if (request.status !== 200) {
                        setText("unable to receive audio file");
                    } else {
                        client.sendAudio(request.response, request.response.length);
                    }
                };

                request.send();
            }

            client.onPartialResponseReceived = function (response) {
				console.log(response);
                setText(response);
            };

            client.onFinalResponseReceived = function (response) {
				console.log(response);
                setText(JSON.stringify(response));

                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(response),
                    dataType: 'json',
                    processData: false,
                    type: 'POST',
                    url: '/message'
                }).done(function(data) {
                    console.log(data);
                });



                console.log("EMMITED");
            };

            client.onIntentReceived = function (response) {
				console.log(response);
                setText(JSON.stringify(response));
                socket.emit ('speechSend', response);
                console.log("EMMITED");
            };
        }
    </script>
    <script type="text/javascript">
        var initPos;
        var pos;

        var lastPos;


        var iKWidth = 1500;
        var ikHeight = 1000;


        var kWidth = 1500;
        var kHeight = 1500;

        var stabilizator = 0;
        var initStab = 0;

        var socket = io();

        function setY(coords) {
            load();
            var screenHeight = window.innerHeight;
            var yp = (screenHeight * coords.y) / (kHeight / 2);
            document.getElementById('cursor').style.top = Math.min((Math.max(yp,0)), screenHeight).toString() + "px";
            document.getElementById('loadCirc').style.top = (-6 + Math.min((Math.max(yp,0)), screenHeight)).toString() + "px";
        }

        function setX(coords) {
            load();
            var screenWidth = window.innerWidth;
            var xp = (screenWidth * coords.x) / (kWidth / 2)  ;
            document.getElementById('cursor').style.left = Math.min((Math.max(xp,0)), screenWidth).toString() + "px";
            document.getElementById('loadCirc').style.left = (-6 + Math.min((Math.max(xp,0)), screenWidth)).toString() + "px" ;
        }
        function load(){
            document.getElementById('loadCirc').style.visibility = "visible";

        }

        socket.on('kinect_pos', function(msg){

            pos = JSON.parse(msg);
            kWidth = iKWidth * (1/(pos.z/1000));
            pos.y = -pos.y;
            pos.x -= initPos.x;
            pos.y -= initPos.y;


            stabilizator = initStab * (pos.z / 1000);

            if(lastPos){
                if(Math.abs(lastPos.x - pos.x) > stabilizator){
                    setX(pos);
                }
                if(Math.abs(lastPos.y - pos.y) > stabilizator ){
                    setY(pos);
                }
            }
            lastPos = pos;
            $('#cursor').loadgo();

        });
        socket.on('kinect_init_pos', function(msg){
            console.log("FIRST POS::" + msg);
            initPos = JSON.parse(msg);
            initPos.y = -initPos.y;

            var newPos = {'x': 0, 'y':0, 'z':0};
            setX(newPos);
            setY(newPos);
        });
    </script>
</head>
<body style="font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif">
    <table width="100%">
        <tr>

            <td></td>
        </tr>
        <tr>
            <td>
                <textarea id="output" style='width:400px;height:200px'></textarea>
            </td>
        </tr>
    </table>



</body>
</html>        