{
  "name": "tridiagonal-solve",
  "version": "1.0.4",
  "author": {
    "name": "Felix E. Klee",
    "email": "felix.klee@inka.de"
  },
  "homepage": "https://github.com/feklee/tridiagonal-solve",
  "description": "Solver for tridiagonal systems of equations",
  "main": "node_main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/feklee/tridiagonal-solve"
  },
  "license": "MIT",
  "keywords": [
    "thomas",
    "tridiagonal",
    "algorithm",
    "set",
    "linear",
    "equations",
    "math",
    "mathematics",
    "numeric"
  ],
  "bugs": {
    "url": "https://github.com/feklee/tridiagonal-solve/issues"
  },
  "readme": "[![Build Status](https://travis-ci.org/feklee/tridiagonal-solve.svg?branch=master)](https://travis-ci.org/feklee/tridiagonal-solve)\n\nIntroduction\n============\n\nThis package provides a solver for a system of linear equations. It is an\nimplementation of the [tridiagonal matrix algorithm][1], also known as *Thomas\nalgorithm*.\n\nSystem, by example of `n = 4` unknowns `x`:\n\n    b[0] * x[0] + c[0] * x[1]                             = d[0]\n    a[0] * x[0] + b[1] * x[1] + c[1] * x[2]               = d[1]\n                  a[1] * x[1] + b[2] * x[2] + c[2] * x[3] = d[2]\n                                a[2] * x[2] + b[3] * x[3] = d[3]\n\nIn matrix notation:\n\n![Rendering in matrix notation][1]\n\nThe algorithm is only guaranteed to find a solution if the tridiagonal matrix\nis *diagonally dominant:*\n\n    |b[0]|   > |c[0]|\n    |b[1]|   > |a[0]| + |c[1]|\n    |b[2]|   > |a[1]| + |c[2]|\n    …\n    |b[n-1]| > |a[n-2]|\n\nIn other words: If that condition is *not* met, then it may happen that the\nalgorithm cannot find a solution even if one exists.\n\nIn case no solution is found, the result is `null`. For bad input, the result\nis undefined.\n\n\nExamples\n========\n\n  * Three unknowns:\n\n    ![Rendering in matrix notation][3]\n\n    Input:\n\n        var solve = require('tridiagonal-solve');\n        return solve([4, 3], [9, -7, 8], [1, 2], [5, 6, 2]);\n\n    Result: `[0.6, -0.4, 0.4]`\n\n  * Matrix is *not* diagonally dominant, and algorithm fails although solution\n    exists:\n\n    ![Rendering in matrix notation][4]\n\n    Snippet: `solve([0], [1, 0], [1], [1, 0])`\n\n    Result: `null`\n\n  * Solution found although matrix is *not* diagonally dominant:\n\n    ![Rendering in matrix notation][5]\n\n    Snippet: `solve([1], [1, 0], [1], [1, 0])`\n\n    Result: `[0, 1]`\n\n\nCoding conventions\n==================\n\n  * Code needs to validate with JSLint.\n\n  * Comments are in Markdown.\n\n  * Avoid constructors (JS is classless), don’t throw exceptions (not necessary\n    in JS).\n\n  * Versioning: major.minor.bug-fix\n\n    Incompatible changes to the API mandate an update of the major version.\n\n    Keep version up to date in:\n\n      + Git tags\n\n      + `package.json`\n\n\nLicense\n=======\n\nExcept where noted otherwise, files are licensed under the MIT License.\n\n\nThe MIT License (MIT)\n---------------------\n\nCopyright (c) 2014 [Felix E. Klee](mailto:felix.klee@inka.de)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[1]: images/input-matrix.png\n[2]: http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm\n[3]: images/example1.png\n[4]: images/example2.png\n[5]: images/example3.png\n",
  "readmeFilename": "README.md",
  "_id": "tridiagonal-solve@1.0.4",
  "dist": {
    "shasum": "729bb42dd42651d2a0957603135a05e93ebf7ad3"
  },
  "_from": "tridiagonal-solve@1.x",
  "_resolved": "https://registry.npmjs.org/tridiagonal-solve/-/tridiagonal-solve-1.0.4.tgz"
}
