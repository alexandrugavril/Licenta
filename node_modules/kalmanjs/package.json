{
  "name": "kalmanjs",
  "version": "1.0.0-beta",
  "private": false,
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-preset-es2015": "^6.1.18",
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^1.0.2",
    "uglify-js": "^2.6.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wouterbulten/kalmanjs.git"
  },
  "description": "A small library implementing the principle of Kalman filters, without any dependencies, to filter out noise in 1D systems.",
  "bugs": {
    "url": "https://github.com/wouterbulten/kalmanjs/issues"
  },
  "homepage": "https://github.com/wouterbulten/kalmanjs",
  "main": "lib/kalman.js",
  "scripts": {
    "compile": "babel --source-maps -d lib/ src/",
    "minify": "uglifyjs lib/kalman.js --compress --preamble '//kalmanjs, LGPL-3.0, https://github.com/wouterbulten/kalmanjs' --source-map lib/kalman.min.js.map --in-source-map lib/kalman.js.map --mangle -o lib/kalman.min.js",
    "prepublish": "npm run compile && npm run minify"
  },
  "keywords": [
    "kalman",
    "filter",
    "math",
    "noise",
    "javascript"
  ],
  "author": {
    "name": "Wouter Bulten",
    "url": "https://wouterbulten.nl"
  },
  "license": "LGPL-3.0",
  "readme": "# KalmanJS\n\nJavascript based Kalman filter for 1D data. Sometimes you need a simple noise filter without any dependencies; for those cases *Kalman.js* is perfect.\n\n![Kalman filter applied to a noisy dataset.](/resources/kalman-example.png?raw=true \"Kalman filter applied to a noisy dataset.\")\n\n## Installation\n\nThe KalmanJS library is a small javascript library and can easily be integrated in to your project manually. Alternatively, the library can be included using npm.\n\n### Node (es6)\n`npm install kalmanjs`\n\n```javascript\nimport KalmanFilter from 'kalmanjs';\n\nconst kf = new KalmanFilter();\nkf.filter(2);\n```\n\n### Node (es5)\n`npm install kalmanjs`\n\n```javascript\nvar KalmanFilter = require('kalmanjs').default;\n\nvar kf = new KalmanFilter();\nkf.filter(2);\n\n```\n\n## Applying the filter on a dataset\n\nUsing the filter is simple. First we create a simple dataset with random noise:\n\n```javascript\n//Generate a simple static dataset\nvar dataConstant = Array.apply(null, {length: dataSetSize}).map(function() {\n  return 4;\n});\n//Add noise to data\nvar noisyDataConstant = dataConstant.map(function(v) {\n  return v + randn(0, 3);\n});\n```\n\nThen we apply the filter iteratively on each data element:\n\n```javascript\n//Apply kalman filter\nvar kalmanFilter = new KalmanFilter({R: 0.01, Q: 3});\n\nvar dataConstantKalman = noisyDataConstant.map(function(v) {\n  return kalmanFilter.filter(v);\n});\n```\n\nSee [this blog post](https://wouterbulten.nl/blog/tech/lightweight-javascript-library-for-noise-filtering/) for screenshots and more examples.\n\n## Background\n\n* [KalmanJS, Lightweight Javascript Library for Noise filtering](https://wouterbulten.nl/blog/tech/lightweight-javascript-library-for-noise-filtering/)\n* [Kalman filters explained: Removing noise from RSSI signals](https://wouterbulten.nl/blog/tech/kalman-filters-explained-removing-noise-from-rssi-signals/)\n\n## Copyright\n\nCopyright (C) 2015 Wouter Bulten\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
  "readmeFilename": "README.md",
  "_id": "kalmanjs@1.0.0-beta",
  "dist": {
    "shasum": "70bfbd802a8c0cea6fb4e04f828c4a62d9469c15"
  },
  "_from": "kalmanjs@",
  "_resolved": "https://registry.npmjs.org/kalmanjs/-/kalmanjs-1.0.0-beta.tgz"
}
