{
  "name": "chaikin-smooth",
  "version": "1.0.4",
  "description": "chaikin's smoothing algorithm for 2D lines",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Jam3/chaikin-smooth.git"
  },
  "keywords": [
    "chaikin",
    "smooth",
    "polyline",
    "2d",
    "polygon",
    "smoothing",
    "chaikin's",
    "smoother",
    "algorithm",
    "svg",
    "shape",
    "round",
    "subdivide",
    "points",
    "line",
    "path"
  ],
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Jam3/chaikin-smooth/issues"
  },
  "homepage": "https://github.com/Jam3/chaikin-smooth",
  "devDependencies": {
    "deepcopy": "^0.3.3"
  },
  "dependencies": {
    "vec2-copy": "^1.0.0"
  },
  "readme": "# chaikin-smooth\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n\n[Chaikin's smoothing algorithm](http://www.idav.ucdavis.edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html) for 2D polylines.\n\n```js\nvar smooth = require('chaikin-smooth')\n\nvar path = [ [0, 0], [25, 25], [13, 13] ]\nvar smoothedPath = smooth(path)\n```\n\nThe result will be:\n\n```js\n[ [ 0, 0 ],\n  [ 6.25, 6.25 ],\n  [ 18.75, 18.75 ],\n  [ 22, 22 ],\n  [ 16, 16 ],\n  [ 13, 13 ] ]\n```\n\n## Usage\n\n[![NPM](https://nodei.co/npm/chaikin-smooth.png)](https://nodei.co/npm/chaikin-smooth/)\n\n#### `smooth(path[, output])`\n\nPerforms the smoothing algorithm on the specified path, returning a list populated with the additional smoothed points. If the input path has a length of <= 2, the result will be a new array with the same points as the input.\n\nIf `output` is provided, it will push the points onto the specified path instead of creating a new one. This is useful to build a smooth polyline out of several inputs, or to re-use arrays to avoid GC thrashing. If reusing, you should clear the path first to zero-length. \n\n**Note:** This uses a strict array test, so it is safe to use `map` and other array functions on it:\n\n```js\nvar smoothedPaths = paths.map(smooth)\n```\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/chaikin-smooth/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "_id": "chaikin-smooth@1.0.4",
  "_from": "chaikin-smooth@"
}
